[{"C:\\work\\exchange-project\\src\\index.js":"1","C:\\work\\exchange-project\\src\\utils\\exchangerate.req.js":"2","C:\\work\\exchange-project\\src\\App.jsx":"3","C:\\work\\exchange-project\\src\\Currency.jsx":"4"},{"size":197,"mtime":1635855304297,"results":"5","hashOfConfig":"6"},{"size":559,"mtime":1635857637387,"results":"7","hashOfConfig":"6"},{"size":2404,"mtime":1635858764937,"results":"8","hashOfConfig":"6"},{"size":609,"mtime":1635858790733,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"mkp7q9",{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\work\\exchange-project\\src\\index.js",[],["20","21"],"C:\\work\\exchange-project\\src\\utils\\exchangerate.req.js",[],"C:\\work\\exchange-project\\src\\App.jsx",["22","23","24","25"],"import { useEffect, useState } from \"react\";\nimport styles from './App.module.css';\nimport {Convertor, Symbols} from \"./utils/exchangerate.req\";\nimport Currency from \"./Currency\";\n\nfunction App() {\n  const [currencyOptions, setCurrencyOptions] = useState([]);\n  const[amount, setAmount] = useState(1);\n  const[amountInFromCurrerncy, setAmountInFromCurrerncy] = useState(true);\n  const[fromSelected, setFromSelected] = useState('USD');\n  const[toSelected, setToSelected] = useState('BYN');\n  const[coeff, setCoeff] = useState(1);\n\n  let toAmount, fromAmount;\n  if(amountInFromCurrerncy){\n    fromAmount = amount;\n    toAmount = amount * coeff;\n  } else {\n    toAmount = amount;\n    fromAmount = amount / coeff;\n  }\n\n  useEffect(async()=>{\n    let getSymbols = await Symbols();\n    let fromTo = await Convertor({amount, fromSelected, toSelected});\n    setCurrencyOptions([fromTo.query.from, ...Object.keys(getSymbols.data.symbols)]);\n    setAmount(fromTo.query.amount);\n    setCoeff(fromTo.result);\n    setFromSelected(fromTo.query.from);\n    setToSelected(fromTo.query.to);\n  }, [])\n\n  useEffect(async()=>{\n    if(fromSelected != null && toSelected != null){\n      let fromTo = await Convertor({amount, fromSelected, toSelected});\n      setCoeff(fromTo.result);\n    }\n  }, [fromSelected, toSelected])\n  \n  function handleFromAmountChange(e){\n    setAmount(e.target.value)\n    setAmountInFromCurrerncy(true)\n  }\n\n  function handleToAmountChange(e){\n    setAmount(e.target.value)\n    setAmountInFromCurrerncy(false)\n  }\n\n  return (\n    <>\n      <h1>Convert</h1>\n      <Currency\n      currencyOptions={currencyOptions}\n      selectedCurrency={fromSelected}\n      onChangeCurrency={e=>setFromSelected(e.target.value)}\n      onChangeAmount={handleFromAmountChange}\n      amount={fromAmount}\n      flag={'fromCurrency'}\n      />\n      <div className={styles.equals}>=</div>\n      <Currency\n      currencyOptions={currencyOptions}\n      selectedCurrency={toSelected}\n      onChangeCurrency={e=>setToSelected(e.target.value)}\n      onChangeAmount={handleToAmountChange}\n      amount={toAmount}\n      flag={'toCurrency'}\n      />\n    </>\n  );\n}\n\nexport default App;\n\n// юзаем аксиос+\n// стилизовать препроцессорами\n// стили-модули\n// вынести запросы в отдельные компоненты+\n// пуш в разные ветки каждую фичу","C:\\work\\exchange-project\\src\\Currency.jsx",[],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":23,"column":13,"nodeType":"32","endLine":31,"endColumn":4},{"ruleId":"30","severity":1,"message":"33","line":31,"column":6,"nodeType":"34","endLine":31,"endColumn":8,"suggestions":"35"},{"ruleId":"30","severity":1,"message":"31","line":33,"column":13,"nodeType":"32","endLine":38,"endColumn":4},{"ruleId":"30","severity":1,"message":"36","line":38,"column":6,"nodeType":"34","endLine":38,"endColumn":32,"suggestions":"37"},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'amount', 'fromSelected', and 'toSelected'. Either include them or remove the dependency array.","ArrayExpression",["40"],"React Hook useEffect has a missing dependency: 'amount'. Either include it or remove the dependency array.",["41"],"no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},{"desc":"42","fix":"44"},"Update the dependencies array to be: [amount, fromSelected, toSelected]",{"range":"45","text":"46"},{"range":"47","text":"46"},[1078,1080],"[amount, fromSelected, toSelected]",[1272,1298]]